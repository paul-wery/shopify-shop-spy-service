{
  "version": 3,
  "sources": ["../../../../src/mongodb/computeProductsSalesAndTurnover.ts"],
  "sourcesContent": ["import { ShopModel } from '@src/types/shop-model';\nimport dayjs from 'dayjs';\nimport { Document, WithId } from 'mongodb';\nimport { getShopProductsCollection, getShopsCollection } from './collections';\n\nexport function lookupProducts(): Document {\n  const document = {\n    $lookup: {\n      from: 'products',\n      localField: '_id',\n      foreignField: 'shopId',\n      as: 'products',\n    },\n  };\n\n  return document;\n}\n\nexport function lookupSales(from: number, to?: number): Document {\n  const document = {\n    $lookup: {\n      from: 'sales',\n      localField: 'products.url',\n      foreignField: 'productUrl',\n      let: { shopId: '$_id' },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: ['$shopId', '$$shopId'] },\n                { $gte: ['$date', from] },\n                ...(to ? [{ $lte: ['$date', to] }] : []),\n              ],\n            },\n          },\n        },\n        {\n          $sort: { date: 1 },\n        },\n      ],\n      as: 'sales',\n    },\n  };\n\n  return document;\n}\n\nexport function projectPopulate(): Document {\n  const document = {\n    $project: {\n      id: {\n        $toString: '$_id',\n      },\n      url: 1,\n      name: 1,\n      logo: 1,\n      about: 1,\n      currency: 1,\n      theme: 1,\n      sales: 1,\n      createdAt: 1,\n      products: {\n        $let: {\n          vars: {\n            array: {\n              $sortArray: {\n                input: {\n                  $map: {\n                    input: '$products',\n                    as: 'product',\n                    in: {\n                      $let: {\n                        vars: {\n                          sales: {\n                            $filter: {\n                              input: '$sales',\n                              as: 'sale',\n                              cond: {\n                                $eq: ['$$sale.productUrl', '$$product.url'],\n                              },\n                            },\n                          },\n                        },\n                        in: {\n                          url: '$$product.url',\n                          name: '$$product.name',\n                          image: '$$product.image',\n                          price: '$$product.price',\n                          createdAt: '$$product.createdAt',\n                          sales: '$$sales',\n                          totalSales: {\n                            $reduce: {\n                              input: '$$sales',\n                              initialValue: 0,\n                              in: { $add: ['$$value', '$$this.count'] },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n                sortBy: { totalSales: -1 },\n              },\n            },\n          },\n          in: {\n            array: '$$array',\n            total: {\n              $map: {\n                input: '$$array',\n                as: 'product',\n                in: {\n                  url: '$$product.url',\n                  sales: '$$product.totalSales',\n                  turnover: {\n                    $multiply: ['$$product.price', '$$product.totalSales'],\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  };\n\n  return document;\n}\n\nexport function projectClean(): Document {\n  const document = {\n    $project: {\n      _id: 0,\n      sales: 0,\n      products: {\n        _id: 0,\n        shopId: 0,\n      },\n    },\n  };\n\n  return document;\n}\nexport const computeProductsSalesAndTurnover = async (\n  shop: WithId<ShopModel>\n) => {\n  const { url } = shop;\n  const last7Days = dayjs().subtract(7, 'day').startOf('day').unix();\n\n  const shopsCollection = getShopsCollection();\n  const data = await shopsCollection\n    .aggregate([\n      {\n        $match: { url },\n      },\n      ...[lookupProducts(), lookupSales(last7Days), projectPopulate()],\n      projectClean(),\n    ])\n    .toArray();\n\n  const productsCollection = getShopProductsCollection();\n  const products = data[0].products.total;\n\n  for (let index = 0; index < products.length; index += 10) {\n    const promises = [];\n\n    for (let i = 0; i < 10; i++) {\n      const product = products[index + i];\n\n      if (product) {\n        promises.push(\n          productsCollection.updateOne(\n            { url: product.url },\n            {\n              $set: {\n                currency: '',\n                last7DaysSales: product.sales,\n                last7DaysTurnover: product.turnover,\n              },\n            }\n          )\n        );\n      }\n    }\n    await Promise.all(promises);\n  }\n};\n"],
  "mappings": "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",
  "names": ["dayjs"]
}
