{
  "version": 3,
  "sources": ["../../../../src/mongodb/updateShop.ts"],
  "sourcesContent": ["import { ShopModel, ShopStatus } from '@src/types/shop-model';\nimport { ShopProductSaleModel } from '@src/types/shop-product-sales-model';\nimport { WithId } from 'mongodb';\nimport {\n  getShopProductSalesCollection,\n  getShopProductsCollection,\n  getShopsCollection,\n} from './collections';\nimport { ShopProductModel } from '@src/types/shop-product-model';\n\nexport async function updateShopStatus(\n  shop: WithId<ShopModel>,\n  status: ShopStatus\n) {\n  const shopsCollection = getShopsCollection();\n\n  await shopsCollection.updateOne({ _id: shop._id }, { $set: { status } });\n}\n\nexport async function updateShop(\n  shop: WithId<ShopModel>,\n  products: ShopProductModel[],\n  sales: ShopProductSaleModel[]\n) {\n  try {\n    const shopsCollection = getShopsCollection();\n    const productsCollection = getShopProductsCollection();\n    const salesCollection = getShopProductSalesCollection();\n\n    await shopsCollection.updateOne({ _id: shop._id }, { $set: shop });\n\n    await productsCollection.bulkWrite(\n      products.map((product) => {\n        return {\n          updateOne: {\n            filter: {\n              shopId: product.shopId,\n              url: product.url,\n            },\n            update: {\n              $set: product,\n            },\n            upsert: true,\n          },\n        };\n      })\n    );\n    await salesCollection.bulkWrite(\n      sales.map((sale) => {\n        return {\n          updateOne: {\n            filter: {\n              shopId: sale.shopId,\n              productUrl: sale.productUrl,\n              date: sale.date,\n            },\n            update: {\n              $set: {\n                shopId: sale.shopId,\n                productUrl: sale.productUrl,\n                date: sale.date,\n              },\n              $inc: { count: sale.count },\n            },\n            upsert: true,\n          },\n        };\n      })\n    );\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,yBAIO;AAGP,eAAsB,iBACpB,MACA,QACA;AACA,QAAM,sBAAkB,uCAAmB;AAE3C,QAAM,gBAAgB,UAAU,EAAE,KAAK,KAAK,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;AACzE;AAEA,eAAsB,WACpB,MACA,UACA,OACA;AACA,MAAI;AACF,UAAM,sBAAkB,uCAAmB;AAC3C,UAAM,yBAAqB,8CAA0B;AACrD,UAAM,sBAAkB,kDAA8B;AAEtD,UAAM,gBAAgB,UAAU,EAAE,KAAK,KAAK,IAAI,GAAG,EAAE,MAAM,KAAK,CAAC;AAEjE,UAAM,mBAAmB;AAAA,MACvB,SAAS,IAAI,CAAC,YAAY;AACxB,eAAO;AAAA,UACL,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,QAAQ,QAAQ;AAAA,cAChB,KAAK,QAAQ;AAAA,YACf;AAAA,YACA,QAAQ;AAAA,cACN,MAAM;AAAA,YACR;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,UAAM,gBAAgB;AAAA,MACpB,MAAM,IAAI,CAAC,SAAS;AAClB,eAAO;AAAA,UACL,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,QAAQ,KAAK;AAAA,cACb,YAAY,KAAK;AAAA,cACjB,MAAM,KAAK;AAAA,YACb;AAAA,YACA,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,QAAQ,KAAK;AAAA,gBACb,YAAY,KAAK;AAAA,gBACjB,MAAM,KAAK;AAAA,cACb;AAAA,cACA,MAAM,EAAE,OAAO,KAAK,MAAM;AAAA,YAC5B;AAAA,YACA,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAP;AACA,YAAQ,MAAM,MAAM,OAAO;AAAA,EAC7B;AACF;",
  "names": []
}
