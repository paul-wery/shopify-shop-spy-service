{
  "version": 3,
  "sources": ["../../../../src/tiktok-ads/startCollectAds.ts"],
  "sourcesContent": ["import { insertTiktokAds } from '@src/mongodb/insertTiktokAds';\nimport { TiktokAdModel } from '@src/types/tiktok-ad-model';\nimport { collectTiktokAds } from './collect';\nimport { getTiktokCredentials } from './get-tiktok-credentials';\nimport { getTiktokAdsConfig } from './tiktok-ads-config';\nimport { TiktokCredentials } from '@src/types/credentials';\nimport { industryCodesLabels } from '@src/types/tiktok-ads-config-model';\n\nconst QUOTA = 500;\nconst KEYWORDS = [\n  'tiktokmademebuyit',\n  'free shipping',\n  'shop now',\n  'buy it now',\n  '50% off',\n];\nconst KEYWORD = 'tiktokmademebuyit';\n\nasync function collectAds(\n  credentials: TiktokCredentials,\n  ad_language: string,\n  industry: string\n) {\n  let hasMore = true;\n  let page = 1;\n  const ads: Omit<TiktokAdModel, 'id'>[] = [];\n\n  while (hasMore) {\n    const { data, pagination } = await collectTiktokAds({\n      page,\n      ad_language,\n      industry,\n      credentials,\n      keyword: KEYWORD,\n    });\n\n    ads.push(...data);\n    hasMore = pagination.has_more;\n    page++;\n  }\n  return ads;\n}\n\nexport async function startCollectAds() {\n  const { languages, industryCodes } = await getTiktokAdsConfig();\n\n  let ads: Partial<TiktokAdModel>[] = [];\n  const credentials = await getTiktokCredentials();\n\n  if (!credentials) {\n    console.error('Failed to get Tiktok Credentials');\n    return false;\n  }\n\n  for (const language of languages) {\n    for (const industry of industryCodes) {\n      console.info(\n        `Collecting ads for ${language} ${industryCodesLabels[industry]}...`\n      );\n      const collectedAds = await collectAds(credentials, language, industry);\n\n      ads.push(...collectedAds);\n      console.info(`Collected ${collectedAds.length} ads`);\n    }\n    ads = ads.filter(\n      (ad, index) => ads.findIndex((e) => e.adId === ad.adId) === index\n    );\n    console.info(`Total collected ads for ${language}: ${ads.length}`);\n    await insertTiktokAds(ads as TiktokAdModel[]);\n    ads = [];\n  }\n  return true;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAEhC,qBAAiC;AACjC,oCAAqC;AACrC,+BAAmC;AAEnC,qCAAoC;AAEpC,MAAM,QAAQ;AACd,MAAM,WAAW;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,MAAM,UAAU;AAEhB,eAAe,WACb,aACA,aACA,UACA;AACA,MAAI,UAAU;AACd,MAAI,OAAO;AACX,QAAM,MAAmC,CAAC;AAE1C,SAAO,SAAS;AACd,UAAM,EAAE,MAAM,WAAW,IAAI,UAAM,iCAAiB;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAED,QAAI,KAAK,GAAG,IAAI;AAChB,cAAU,WAAW;AACrB;AAAA,EACF;AACA,SAAO;AACT;AAEA,eAAsB,kBAAkB;AACtC,QAAM,EAAE,WAAW,cAAc,IAAI,UAAM,6CAAmB;AAE9D,MAAI,MAAgC,CAAC;AACrC,QAAM,cAAc,UAAM,oDAAqB;AAE/C,MAAI,CAAC,aAAa;AAChB,YAAQ,MAAM,kCAAkC;AAChD,WAAO;AAAA,EACT;AAEA,aAAW,YAAY,WAAW;AAChC,eAAW,YAAY,eAAe;AACpC,cAAQ;AAAA,QACN,sBAAsB,YAAY,mDAAoB,QAAQ;AAAA,MAChE;AACA,YAAM,eAAe,MAAM,WAAW,aAAa,UAAU,QAAQ;AAErE,UAAI,KAAK,GAAG,YAAY;AACxB,cAAQ,KAAK,aAAa,aAAa,YAAY;AAAA,IACrD;AACA,UAAM,IAAI;AAAA,MACR,CAAC,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE,SAAS,GAAG,IAAI,MAAM;AAAA,IAC9D;AACA,YAAQ,KAAK,2BAA2B,aAAa,IAAI,QAAQ;AACjE,cAAM,wCAAgB,GAAsB;AAC5C,UAAM,CAAC;AAAA,EACT;AACA,SAAO;AACT;",
  "names": []
}
