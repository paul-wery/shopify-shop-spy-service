{
  "version": 3,
  "sources": ["../../../../src/tiktok-ads/get-tiktok-credentials.ts"],
  "sourcesContent": ["import {\n  NO_ACCOUNTS_ERROR,\n  TIKTOK_ACCOUNTS_POOL,\n  TIKTOK_ROOT,\n} from '@src/constants/index';\nimport { TiktokCredentials } from '@src/types/credentials';\nimport fs from 'fs';\nimport { BrowserContext, Page } from 'playwright-chromium';\nimport { chromium } from 'playwright-extra';\nimport stealthPlugin from 'puppeteer-extra-plugin-stealth';\nimport { PLAYWRIGHT_CONFIG } from './config';\nimport { getRandomAccount } from './utils';\n\nchromium.use(stealthPlugin());\n\nasync function extractCredentials(page: Page): Promise<TiktokCredentials> {\n  await page.goto(TIKTOK_ROOT);\n  return new Promise((resolve) => {\n    page.on('request', (request) => {\n      if (request.url().includes('list?')) {\n        const headers = request.headers();\n        const webId = headers['web-id'];\n        const userSign = headers['user-sign'];\n        const timestamp = headers['timestamp'];\n\n        resolve({ webId, userSign, timestamp });\n      }\n    });\n  });\n}\n\nasync function loginWithGoogle(context: BrowserContext, page: Page) {\n  const credentials = getRandomAccount(\n    TIKTOK_ACCOUNTS_POOL.filter((e) => !e.blocked)\n  );\n\n  if (!credentials) return false;\n\n  const { email, password } = credentials;\n\n  await page.goto(TIKTOK_ROOT);\n  await page.waitForLoadState('domcontentloaded');\n  await page.click('text=\"Log in\"');\n\n  await page.click('text=\"Log in with Google\"');\n\n  let maxWait = 3;\n  while (context.pages().length < 2 && maxWait > 0) {\n    await page.waitForTimeout(1000);\n    maxWait--;\n  }\n\n  if (context.pages().length < 2) {\n    return loginWithGoogle(context, page);\n  }\n\n  const popup = context.pages()[1];\n\n  await popup.waitForLoadState('networkidle');\n  await popup.fill('input[type=\"email\"]', email);\n  await popup.keyboard.press('Enter');\n\n  try {\n    await popup.fill('input[type=\"password\"]', password, { timeout: 5000 });\n    await popup.keyboard.press('Enter');\n  } catch (error) {\n    if (\n      (await popup.isVisible('text=\"Try again\"')) ||\n      (await popup.isVisible('text=\"Reintentar\"'))\n    ) {\n      credentials.blocked = true;\n      await popup.close();\n      return loginWithGoogle(context, page);\n    } else throw error;\n  }\n\n  await popup.waitForLoadState('networkidle');\n  if (\n    (await popup.isVisible('input[type=\"tel\"]')) ||\n    (await popup.isVisible('text=\"Recover account\"')) ||\n    (await popup.isVisible('text=\"Recuperar la cuenta\"'))\n  ) {\n    credentials.blocked = true;\n    await popup.close();\n    return loginWithGoogle(context, page);\n  }\n  return true;\n}\n\nexport async function getTiktokCredentials() {\n  console.info('Get Tiktok Credentials');\n  const browser = await chromium.launch(PLAYWRIGHT_CONFIG);\n  let credentials: TiktokCredentials | null = null;\n  const context = await browser.newContext({ locale: 'en-US' });\n  const page = await context.newPage();\n\n  try {\n    console.log('Login with Google');\n    const success = await loginWithGoogle(context, page);\n\n    if (!success) throw new Error(NO_ACCOUNTS_ERROR);\n    console.log('Login with Google: Done');\n\n    console.log('extractCredentials');\n    credentials = await extractCredentials(page);\n    console.info('Get Tiktok Credentials: Done');\n  } catch (error) {\n    console.error('Get Tiktok Credentials: Failed');\n    if (error.message === NO_ACCOUNTS_ERROR) throw error;\n    console.error(error);\n    fs.writeFileSync('./error.html', await context.pages()[1].content());\n  } finally {\n    await browser.close();\n  }\n  return credentials;\n}\n"],
  "mappings": "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",
  "names": ["stealthPlugin", "fs"]
}
